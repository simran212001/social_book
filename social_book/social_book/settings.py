"""
Django settings for social_book project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xu95!t3tv#8jljs#-bne3&xv_x+iia7f6v@@1n1e+q%q*0hg*i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_extensions',
    'djoser',
    'apps.users',
    'apps.api_app',
    'apps.djoser_api',

    'django.contrib.sites',
    # 'accounts',
    # 'rest_framework_simplejwt',
    # 'rest_framework_simplejwt.token_blacklist',
    # 'social_django',
]
SITE_ID = 1
# #configure DRF
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}


# from datetime import timedelta

# SIMPLE_JWT ={

#     "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), 
#     "REFRESH_TOKEN_LIFETIME": timedelta (days=1), 
#     "BLACKLIST_AFTER_ROTATION": True,

#     "ROTATE_REFRESH_TOKENS": False,

#     "UPDATE_LAST_LOGIN": False,

#     "ALGORITHM" : "H5256",

#     "SIGNING_KEY" : SECRET_KEY,

#     'VERIFYING_KEY': None,

#     "AUDIENCE": None,

#     "ISSUER": None,

#     "AUTH_HEADER_TYPES": ("Bearer",), 
#     "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",

#     "USER_ID_FIELD": 'id',

#     "USER_ID_CLAIM": "user_id",

#     "USER_AUTHENTICATION_RULE": "rest framework_simplejwt.authentication.default_user_authentication_ru",

#     "AUTH_TOKEN_CLASSES": ("rest framework simple jwt.tokens.AccessToken",),

#     "TOKEN_TYPE_CLAIM": 'token_type',

#     "JTI_CLAIM": "jti",

#     "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",

#     "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),

#     "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
# }
# configure Djoser
DJOSER = {
    # "USER_ID_FIELD": "username"
    "LOGIN_FIELD" : "username",
    "USER_CREATE_PASSWORD_RETYPE" : True,
    'SEND_ACTIVATION_EMAIL': True,
    "USERNAME_CHANGED_EMAIL_CONFIRMATION" : True,
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION" : True,
    "SEND_CONFIRMATION_EMAIL" : True,
    "SET_PASSWORD_RETYPE" : True,
    "PASSWORD_RESET_CONFIRM_URL" :"password/reset/confirm/{uid}{token}",
    'USERNAME_RESET_CONFIRM_URL': 'email/reset/confirm/{uid), {token}', 'ACTICATION_URL': 'activate/{uid}/{token}', 
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    "SEND_ACTIVATION_EMAIL": True,

    'SERIALIZERS':{
        'user_create' : 'apps.users.serializers.UserCreateSerializer',
        'user' : 'apps.users.serializers.UserCreateSerializer',
        'user_delete' : 'djoser.serializers.UserDeleteSerializer',
    }
}


SIMPLE_JWT = {
   'AUTH_HEADER_TYPES': ('JWT',),
}

AUTH_USER_MODEL = "users.CustomUser"

MIDDLEWARE = [
     'social_django.middleware.SocialAuthExceptionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'social_book.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'social_book.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# DATABASE_ROUTERS = ['social_book.UsersRouter.UsersRouter', 'social_book.api_appRouter.api_appRouter']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'socialbook-db',
        'USER': 'postgres',
        'PASSWORD': 'Simran21',
        'HOST': 'socialbook-db.ct4mo8wikpci.eu-north-1.rds.amazonaws.com',
        'PORT': '5432',
    }
}
#     'users': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'Initial_db',
#         'USER': 'postgres',
#         'PASSWORD': 'Simran21',
#         'HOST': 'socialbook-db-instance.c1ttqa9i87aq.ap-south-1.rds.amazonaws.com',
#         'PORT': '5432',
#     },
#     'api_app': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'Initial_db',
#         'USER': 'postgres',
#         'PASSWORD': 'Simran21',
#         'HOST': 'socialbook-db-instance.c1ttqa9i87aq.ap-south-1.rds.amazonaws.com',
#         'PORT': '5432',
#     }
# }


# DATABASES = {
#     'default': {
#     'ENGINE': 'django.db.backends.postgresql',
#     'NAME': 'Initial_db',
#     'USER': 'postgres',
#     'PASSWORD': 'Simran21',
#     'HOST': 'socialbook-db-instance.c1ttqa9i87aq.ap-south-1.rds.amazonaws.com',
#     'PORT': '5432',
#     }
# }

# DATABASES = {
#     # 'default': {
#     #     'ENGINE': 'django.db.backends.sqlite3',
#     #     'NAME': BASE_DIR / 'db.sqlite3',
#     # }
#      'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'socialbook',
#         'USER': 'postgres',
#         'PASSWORD': '123456',
#         'HOST': '127.0.0.1',
#         'PORT': '5432',
#     }
# }




EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = '2019153@iiitdmj.ac.in'
EMAIL_HOST_PASSWORD ='Simr153&&'
EMAIL_USE_TLS = True


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# Replace these values with your database configuration
DB_USER = 'postgres'
DB_PASSWORD = 'Simran21'
DB_HOST = 'socialbook-db.ct4mo8wikpci.eu-north-1.rds.amazonaws.com'
DB_PORT = '5432'
DB_NAME = 'socialbook-db'

DATABASE_URL = f'postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}'

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)




# REST_FRAMEWORK = {
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated'
#     ],
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ),
# }

# AUTHENTICATION_BACKENDS = (
#     'social_core.backends.google.GoogleOAuth2',
#     'social_core.backends.facebook.FacebookOAuth2',
#     'django.contrib.auth.backends.ModelBackend'
# )

# SIMPLE_JWT = {
#     'AUTH_HEADER_TYPES': ('JWT',),
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
#     'AUTH_TOKEN_CLASSES': (
#         'rest_framework_simplejwt.tokens.AccessToken',
#     )
# }

# DJOSER = {
#     'LOGIN_FIELD': 'email',
#     'USER_CREATE_PASSWORD_RETYPE': True,
#     'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
#     'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
#     'SEND_CONFIRMATION_EMAIL': True,
#     'SET_USERNAME_RETYPE': True,
#     'SET_PASSWORD_RETYPE': True,
#     'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
#     'USERNAME_RESET_CONFIRM_URL': 'email/reset/confirm/{uid}/{token}',
#     'ACTIVATION_URL': 'activate/{uid}/{token}',
#     'SEND_ACTIVATION_EMAIL': True,
#     'SOCIAL_AUTH_TOKEN_STRATEGY': 'djoser.social.token.jwt.TokenStrategy',
#     'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': ['http://localhost:8000/google', 'http://localhost:8000/facebook'],
#     'SERIALIZERS': {
#         'user_create': 'accounts.serializers.UserCreateSerializer',
#         'user': 'accounts.serializers.UserCreateSerializer',
#         'current_user': 'accounts.serializers.UserCreateSerializer',
#         'user_delete': 'djoser.serializers.UserDeleteSerializer',
#     }
# }

# # SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '[YOUR GOOGLE OAUTH2 API KEY]'
# # SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '[YOUR GOOGLE OAUTH2 API SECRET]'
# # SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile', 'openid']
# # SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['first_name', 'last_name']

# # SOCIAL_AUTH_FACEBOOK_KEY = '[YOUR FACEBOOK API KEY]'
# # SOCIAL_AUTH_FACEBOOK_SECRET = '[YOUR FACEBOOK API SECRET]'
# # SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
# # SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
# #     'fields': 'email, first_name, last_name'
# # }

# # AUTH_USER_MODEL = "apps.accounts.UserAccount"
